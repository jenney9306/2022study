# message broker

Redis, RabbitMQ, Kafka 같은 기술을 메시지 플랫폼이라고 한다.

메시지 플랫폼에는 두가지 특징이있다.

1. 메세지 브로커
2. 이벤트 브로커

- 메세지 브로커
    - 대규모 메시지 기반 미들웨어 아키텍쳐로 데이터 손실이 발생할 수 있다.
- 이벤트 브로커
    - 이벤트 관리, 이벤트가 삭제 되지 않는다.
    

생산자&소비자

생산자 —> [ 큐 queue ] —> 소비자 

메시지 플랫폼의 종류

- RabbitMQ (메세지브로커)
    
    카프카에 비해 속도가 느림.
    
    안정성이 있음.
    
    소비가 중심.
    
    생산자와 소비자 결합도가 높음.
    

- Redis (메세지브로커)
    
    캐시로도 사용됨.
    
    데이터 삭제 가능.
    
    메모리 기반으로 서버가 다운되면 redis 데이터가 모두 삭제됨.
    
- Kafka(이벤트브로커)
    
    이벤트 기반.
    
    속도가 빠름.
    
    비동기식 방식.
    
    분산처리 효과.
    
    이벤트 기반 MSA로 발전하는데 도움.
    

현재프로젝트에서는 redis를 캐시 역할로 사용한다.

(how? api 요청이 오면 먼저 레디스 키로 해당 값을 조회한뒤 값이 있으면 응답을 하고, 값이 없으면 그때 DB 조회 방식)

kafka는 Scdf(spring cloud data flow) 운영을 맡게되어 사용해보진 않았지만 궁금하여 내용을 찾아보았다.

[Kafka](https://www.notion.so/Kafka-e58b63343ba74a8fa9a45e82f1e90946)
